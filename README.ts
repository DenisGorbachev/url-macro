#!/usr/bin/env -S deno run --allow-read --allow-run=bash,git,cargo --allow-env --allow-sys

import * as zx from 'npm:zx'
import { z, ZodSchema } from "https://deno.land/x/zod@v3.23.8/mod.ts";
import { assertEquals } from 'https://jsr.io/@std/assert/1.0.0/equals.ts'

const CargoTomlSchema = z.object({
  package: z.object({
    name: z.string().min(1),
    description: z.string().min(1),
    repository: z.string().url().min(1),
    metadata: z.object({
      details: z.object({
        title: z.string().min(1),
        tagline: z.string(),
        summary: z.string(),
      })
    })
  })
})

type CargoToml = z.infer<typeof CargoTomlSchema>;

const RepoSchema = z.object({
  url: z.string().url(),
})

type Repo = z.infer<typeof RepoSchema>;

const $ = zx.$({
  cwd: import.meta.dirname
})
const parse = <T>(schema: ZodSchema<T>, input: { toString: () => string }) => schema.parse(JSON.parse(input.toString()))

const theCargoToml: CargoToml = parse(CargoTomlSchema, await $`yj -t < Cargo.toml`)
const { package: {name, description, metadata: {details: {title}}} } = theCargoToml
const repo: Repo = parse(RepoSchema, await $`gh repo view --json url`)

assertEquals(repo.url, theCargoToml.package.repository)

const autogenerated = `
<!-- DO NOT EDIT -->
<!-- This file is automatically generated by README.ts. -->
<!-- Edit README.ts if you want to make changes. -->
`.trim()

console.info(`
${autogenerated}

# ${title}

[![Build](${repo.url}/actions/workflows/ci.yml/badge.svg)](${repo.url})
[![Documentation](https://docs.rs/${name}/badge.svg)](https://docs.rs/${name})

## Overview

${description}

## Examples

\`\`\`rust
let google = url!("https://www.google.com/");

let invalid_url = url!("foo");
                  ^^^^^
                  Triggers a compiler error
\`\`\`

## Installation

\`\`\`shell
cargo add ${name} url
\`\`\`

**Important:** add the \`url\` crate too.

## License

[Apache License 2.0](LICENSE-APACHE) or [MIT License](LICENSE-MIT) at your option.

Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.
`.trim())
